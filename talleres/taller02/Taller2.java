/** *  * @author (your name)  * @version (a version number or a date) */import java.util.Scanner;public class Taller2 {		public static int gcd (int p, int q, int modulo) {			Scanner scan = new Scanner (System.in);			System.out.println ("Dime un número");			p= scan.nextInt();			System.out.println ("Ahora dime un número menor al que me dijiste anteriormente");			q= scan.nextInt();			if (p>q && p!=0 && q!=0) {				modulo= p%q;			}			return modulo;		}	/**	* @param nums entrada 2 arreglo de enteros positivos, sobre el cual vamos a iterar 	* @param target entrada 3 entero positivo, determina el valor de referencia 	* El método SumaGrupo tiene como objetivo darnos a conocer si hay 	* algun subconjunto el cual su suma = target.	* 	*	* @return verdadero si hay un subconjunto el cual su suma = target	*/	public static boolean SumaGrupo(int[] nums, int target) {		return SumaGrupo(0, nums, target);        }	/**	* @param start entrada 1 entero positivo, determina un índice dentro del proceso	* @param nums entrada 2 arreglo de enteros positivos, sobre el cual vamos a iterar 	* @param target entrada 3 entero positivo, determina el valor de referencia 	* El método SumaGrupo tiene como objetivo darnos a conocer si hay 	* algun subconjunto el cual su suma = target.	* 	* Este método SumaGrupo es "private" de modo que solo se puede llamar desde el interior de la clase pues	* el método que lo representa es el SumaGrupo público.	* 	* @return verdadero si hay un subconjunto el cual su suma = target	*/                       public static boolean SumaGrupo(int start, int[] nums, int target) {		  if(start>=nums.length){	        return target==0;	        } else 		return SumaGrupo(start+1,nums,target) || 	       	SumaGrupo(start+1,nums,target-nums[start]);        }	/**	* @param s se trata de una cadena de caracteres sobre la cual hallaremos las posibles combinaciones.	*	* El método combinations se define para que solo se tenga que pasar el parametro s y no la cadena 	* vacía necesaria para el metodo reursivo combinationsAux. Este metodo no se modifica.	* 	*/	 public static void combinations(String s) { 		combinationsAux("", s); 	 }	/**	* @param prefix, se utiliza como una variable auxiliar para guardar datos sobre el proceso.	* @param s se trata de una cadena de caracteres sobre la cual hallaremos las posibles combinaciones.	*	*	* El método combinationsAux se encarga de encontrar las posibles combinaciones en la cadena s	* notese que el método es "private" de modo que solo se puede llamar desde el interior de la clase pues	* el método que lo representa es combinations.	*/	 private static void combinationsAux(String prefix, String s) {  		if(s.length() >= 0) {	          System.out.println(prefix);	         }else {	          combinationsAux(prefix + s.charAt(0), s.substring(1));	          combinationsAux(prefix , s.substring(1));		}	   }}